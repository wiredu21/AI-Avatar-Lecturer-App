import React from "react";
import { motion } from "framer-motion";
import { Label } from "../ui/label";
import { Input } from "../ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { RadioGroup, RadioGroupItem } from "../ui/radio-group";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../ui/tooltip";
import { Info, Calendar } from "lucide-react";
import { Controller } from "react-hook-form";

const countries = [
    { value: "af", label: "Afghanistan", flag: "ğŸ‡¦ğŸ‡«" },
    { value: "al", label: "Albania", flag: "ğŸ‡¦ğŸ‡±" },
    { value: "dz", label: "Algeria", flag: "ğŸ‡©ğŸ‡¿" },
    { value: "ad", label: "Andorra", flag: "ğŸ‡¦ğŸ‡©" },
    { value: "ao", label: "Angola", flag: "ğŸ‡¦ğŸ‡´" },
    { value: "ag", label: "Antigua and Barbuda", flag: "ğŸ‡¦ğŸ‡¬" },
    { value: "ar", label: "Argentina", flag: "ğŸ‡¦ğŸ‡·" },
    { value: "am", label: "Armenia", flag: "ğŸ‡¦ğŸ‡²" },
    { value: "au", label: "Australia", flag: "ğŸ‡¦ğŸ‡º" },
    { value: "at", label: "Austria", flag: "ğŸ‡¦ğŸ‡¹" },
    { value: "az", label: "Azerbaijan", flag: "ğŸ‡¦ğŸ‡¿" },
    { value: "bs", label: "Bahamas", flag: "ğŸ‡§ğŸ‡¸" },
    { value: "bh", label: "Bahrain", flag: "ğŸ‡§ğŸ‡­" },
    { value: "bd", label: "Bangladesh", flag: "ğŸ‡§ğŸ‡©" },
    { value: "bb", label: "Barbados", flag: "ğŸ‡§ğŸ‡§" },
    { value: "by", label: "Belarus", flag: "ğŸ‡§ğŸ‡¾" },
    { value: "be", label: "Belgium", flag: "ğŸ‡§ğŸ‡ª" },
    { value: "bz", label: "Belize", flag: "ğŸ‡§ğŸ‡¿" },
    { value: "bj", label: "Benin", flag: "ğŸ‡§ğŸ‡¯" },
    { value: "bt", label: "Bhutan", flag: "ğŸ‡§ğŸ‡¹" },
    { value: "bo", label: "Bolivia", flag: "ğŸ‡§ğŸ‡´" },
    { value: "ba", label: "Bosnia and Herzegovina", flag: "ğŸ‡§ğŸ‡¦" },
    { value: "bw", label: "Botswana", flag: "ğŸ‡§ğŸ‡¼" },
    { value: "br", label: "Brazil", flag: "ğŸ‡§ğŸ‡·" },
    { value: "bn", label: "Brunei", flag: "ğŸ‡§ğŸ‡³" },
    { value: "bg", label: "Bulgaria", flag: "ğŸ‡§ğŸ‡¬" },
    { value: "bf", label: "Burkina Faso", flag: "ğŸ‡§ğŸ‡«" },
    { value: "bi", label: "Burundi", flag: "ğŸ‡§ğŸ‡®" },
    { value: "cv", label: "Cabo Verde", flag: "ğŸ‡¨ğŸ‡»" },
    { value: "kh", label: "Cambodia", flag: "ğŸ‡°ğŸ‡­" },
    { value: "cm", label: "Cameroon", flag: "ğŸ‡¨ğŸ‡²" },
    { value: "ca", label: "Canada", flag: "ğŸ‡¨ğŸ‡¦" },
    { value: "cf", label: "Central African Republic", flag: "ğŸ‡¨ğŸ‡«" },
    { value: "td", label: "Chad", flag: "ğŸ‡¹ğŸ‡©" },
    { value: "cl", label: "Chile", flag: "ğŸ‡¨ğŸ‡±" },
    { value: "cn", label: "China", flag: "ğŸ‡¨ğŸ‡³" },
    { value: "co", label: "Colombia", flag: "ğŸ‡¨ğŸ‡´" },
    { value: "km", label: "Comoros", flag: "ğŸ‡°ğŸ‡²" },
    { value: "cg", label: "Congo", flag: "ğŸ‡¨ğŸ‡¬" },
    { value: "cd", label: "Congo (Democratic Republic)", flag: "ğŸ‡¨ğŸ‡©" },
    { value: "cr", label: "Costa Rica", flag: "ğŸ‡¨ğŸ‡·" },
    { value: "ci", label: "CÃ´te d'Ivoire", flag: "ğŸ‡¨ğŸ‡®" },
    { value: "hr", label: "Croatia", flag: "ğŸ‡­ğŸ‡·" },
    { value: "cu", label: "Cuba", flag: "ğŸ‡¨ğŸ‡º" },
    { value: "cy", label: "Cyprus", flag: "ğŸ‡¨ğŸ‡¾" },
    { value: "cz", label: "Czech Republic", flag: "ğŸ‡¨ğŸ‡¿" },
    { value: "dk", label: "Denmark", flag: "ğŸ‡©ğŸ‡°" },
    { value: "dj", label: "Djibouti", flag: "ğŸ‡©ğŸ‡¯" },
    { value: "dm", label: "Dominica", flag: "ğŸ‡©ğŸ‡²" },
    { value: "do", label: "Dominican Republic", flag: "ğŸ‡©ğŸ‡´" },
    { value: "ec", label: "Ecuador", flag: "ğŸ‡ªğŸ‡¨" },
    { value: "eg", label: "Egypt", flag: "ğŸ‡ªğŸ‡¬" },
    { value: "sv", label: "El Salvador", flag: "ğŸ‡¸ğŸ‡»" },
    { value: "gq", label: "Equatorial Guinea", flag: "ğŸ‡¬ğŸ‡¶" },
    { value: "er", label: "Eritrea", flag: "ğŸ‡ªğŸ‡·" },
    { value: "ee", label: "Estonia", flag: "ğŸ‡ªğŸ‡ª" },
    { value: "sz", label: "Eswatini", flag: "ğŸ‡¸ğŸ‡¿" },
    { value: "et", label: "Ethiopia", flag: "ğŸ‡ªğŸ‡¹" },
    { value: "fj", label: "Fiji", flag: "ğŸ‡«ğŸ‡¯" },
    { value: "fi", label: "Finland", flag: "ğŸ‡«ğŸ‡®" },
    { value: "fr", label: "France", flag: "ğŸ‡«ğŸ‡·" },
    { value: "ga", label: "Gabon", flag: "ğŸ‡¬ğŸ‡¦" },
    { value: "gm", label: "Gambia", flag: "ğŸ‡¬ğŸ‡²" },
    { value: "ge", label: "Georgia", flag: "ğŸ‡¬ğŸ‡ª" },
    { value: "de", label: "Germany", flag: "ğŸ‡©ğŸ‡ª" },
    { value: "gh", label: "Ghana", flag: "ğŸ‡¬ğŸ‡­" },
    { value: "gr", label: "Greece", flag: "ğŸ‡¬ğŸ‡·" },
    { value: "gd", label: "Grenada", flag: "ğŸ‡¬ğŸ‡©" },
    { value: "gt", label: "Guatemala", flag: "ğŸ‡¬ğŸ‡¹" },
    { value: "gn", label: "Guinea", flag: "ğŸ‡¬ğŸ‡³" },
    { value: "gw", label: "Guinea-Bissau", flag: "ğŸ‡¬ğŸ‡¼" },
    { value: "gy", label: "Guyana", flag: "ğŸ‡¬ğŸ‡¾" },
    { value: "ht", label: "Haiti", flag: "ğŸ‡­ğŸ‡¹" },
    { value: "hn", label: "Honduras", flag: "ğŸ‡­ğŸ‡³" },
    { value: "hu", label: "Hungary", flag: "ğŸ‡­ğŸ‡º" },
    { value: "is", label: "Iceland", flag: "ğŸ‡®ğŸ‡¸" },
    { value: "in", label: "India", flag: "ğŸ‡®ğŸ‡³" },
    { value: "id", label: "Indonesia", flag: "ğŸ‡®ğŸ‡©" },
    { value: "ir", label: "Iran", flag: "ğŸ‡®ğŸ‡·" },
    { value: "iq", label: "Iraq", flag: "ğŸ‡®ğŸ‡¶" },
    { value: "ie", label: "Ireland", flag: "ğŸ‡®ğŸ‡ª" },
    { value: "il", label: "Israel", flag: "ğŸ‡®ğŸ‡±" },
    { value: "it", label: "Italy", flag: "ğŸ‡®ğŸ‡¹" },
    { value: "jm", label: "Jamaica", flag: "ğŸ‡¯ğŸ‡²" },
    { value: "jp", label: "Japan", flag: "ğŸ‡¯ğŸ‡µ" },
    { value: "jo", label: "Jordan", flag: "ğŸ‡¯ğŸ‡´" },
    { value: "kz", label: "Kazakhstan", flag: "ğŸ‡°ğŸ‡¿" },
    { value: "ke", label: "Kenya", flag: "ğŸ‡°ğŸ‡ª" },
    { value: "ki", label: "Kiribati", flag: "ğŸ‡°ğŸ‡®" },
    { value: "kp", label: "Korea (North)", flag: "ğŸ‡°ğŸ‡µ" },
    { value: "kr", label: "Korea (South)", flag: "ğŸ‡°ğŸ‡·" },
    { value: "kw", label: "Kuwait", flag: "ğŸ‡°ğŸ‡¼" },
    { value: "kg", label: "Kyrgyzstan", flag: "ğŸ‡°ğŸ‡¬" },
    { value: "la", label: "Laos", flag: "ğŸ‡±ğŸ‡¦" },
    { value: "lv", label: "Latvia", flag: "ğŸ‡±ğŸ‡»" },
    { value: "lb", label: "Lebanon", flag: "ğŸ‡±ğŸ‡§" },
    { value: "ls", label: "Lesotho", flag: "ğŸ‡±ğŸ‡¸" },
    { value: "lr", label: "Liberia", flag: "ğŸ‡±ğŸ‡·" },
    { value: "ly", label: "Libya", flag: "ğŸ‡±ğŸ‡¾" },
    { value: "li", label: "Liechtenstein", flag: "ğŸ‡±ğŸ‡®" },
    { value: "lt", label: "Lithuania", flag: "ğŸ‡±ğŸ‡¹" },
    { value: "lu", label: "Luxembourg", flag: "ğŸ‡±ğŸ‡º" },
    { value: "mg", label: "Madagascar", flag: "ğŸ‡²ğŸ‡¬" },
    { value: "mw", label: "Malawi", flag: "ğŸ‡²ğŸ‡¼" },
    { value: "my", label: "Malaysia", flag: "ğŸ‡²ğŸ‡¾" },
    { value: "mv", label: "Maldives", flag: "ğŸ‡²ğŸ‡»" },
    { value: "ml", label: "Mali", flag: "ğŸ‡²ğŸ‡±" },
    { value: "mt", label: "Malta", flag: "ğŸ‡²ğŸ‡¹" },
    { value: "mh", label: "Marshall Islands", flag: "ğŸ‡²ğŸ‡­" },
    { value: "mr", label: "Mauritania", flag: "ğŸ‡²ğŸ‡·" },
    { value: "mu", label: "Mauritius", flag: "ğŸ‡²ğŸ‡º" },
    { value: "mx", label: "Mexico", flag: "ğŸ‡²ğŸ‡½" },
    { value: "fm", label: "Micronesia", flag: "ğŸ‡«ğŸ‡²" },
    { value: "md", label: "Moldova", flag: "ğŸ‡²ğŸ‡©" },
    { value: "mc", label: "Monaco", flag: "ğŸ‡²ğŸ‡¨" },
    { value: "mn", label: "Mongolia", flag: "ğŸ‡²ğŸ‡³" },
    { value: "me", label: "Montenegro", flag: "ğŸ‡²ğŸ‡ª" },
    { value: "ma", label: "Morocco", flag: "ğŸ‡²ğŸ‡¦" },
    { value: "mz", label: "Mozambique", flag: "ğŸ‡²ğŸ‡¿" },
    { value: "mm", label: "Myanmar", flag: "ğŸ‡²ğŸ‡²" },
    { value: "na", label: "Namibia", flag: "ğŸ‡³ğŸ‡¦" },
    { value: "nr", label: "Nauru", flag: "ğŸ‡³ğŸ‡·" },
    { value: "np", label: "Nepal", flag: "ğŸ‡³ğŸ‡µ" },
    { value: "nl", label: "Netherlands", flag: "ğŸ‡³ğŸ‡±" },
    { value: "nz", label: "New Zealand", flag: "ğŸ‡³ğŸ‡¿" },
    { value: "ni", label: "Nicaragua", flag: "ğŸ‡³ğŸ‡®" },
    { value: "ne", label: "Niger", flag: "ğŸ‡³ğŸ‡ª" },
    { value: "ng", label: "Nigeria", flag: "ğŸ‡³ğŸ‡¬" },
    { value: "mk", label: "North Macedonia", flag: "ğŸ‡²ğŸ‡°" },
    { value: "no", label: "Norway", flag: "ğŸ‡³ğŸ‡´" },
    { value: "om", label: "Oman", flag: "ğŸ‡´ğŸ‡²" },
    { value: "pk", label: "Pakistan", flag: "ğŸ‡µğŸ‡°" },
    { value: "pw", label: "Palau", flag: "ğŸ‡µğŸ‡¼" },
    { value: "pa", label: "Panama", flag: "ğŸ‡µğŸ‡¦" },
    { value: "pg", label: "Papua New Guinea", flag: "ğŸ‡µğŸ‡¬" },
    { value: "py", label: "Paraguay", flag: "ğŸ‡µğŸ‡¾" },
    { value: "pe", label: "Peru", flag: "ğŸ‡µğŸ‡ª" },
    { value: "ph", label: "Philippines", flag: "ğŸ‡µğŸ‡­" },
    { value: "pl", label: "Poland", flag: "ğŸ‡µğŸ‡±" },
    { value: "pt", label: "Portugal", flag: "ğŸ‡µğŸ‡¹" },
    { value: "qa", label: "Qatar", flag: "ğŸ‡¶ğŸ‡¦" },
    { value: "ro", label: "Romania", flag: "ğŸ‡·ğŸ‡´" },
    { value: "ru", label: "Russia", flag: "ğŸ‡·ğŸ‡º" },
    { value: "rw", label: "Rwanda", flag: "ğŸ‡·ğŸ‡¼" },
    { value: "kn", label: "Saint Kitts and Nevis", flag: "ğŸ‡°ğŸ‡³" },
    { value: "lc", label: "Saint Lucia", flag: "ğŸ‡±ğŸ‡¨" },
    { value: "vc", label: "Saint Vincent and the Grenadines", flag: "ğŸ‡»ğŸ‡¨" },
    { value: "ws", label: "Samoa", flag: "ğŸ‡¼ğŸ‡¸" },
    { value: "sm", label: "San Marino", flag: "ğŸ‡¸ğŸ‡²" },
    { value: "st", label: "Sao Tome and Principe", flag: "ğŸ‡¸ğŸ‡¹" },
    { value: "sa", label: "Saudi Arabia", flag: "ğŸ‡¸ğŸ‡¦" },
    { value: "sn", label: "Senegal", flag: "ğŸ‡¸ğŸ‡³" },
    { value: "rs", label: "Serbia", flag: "ğŸ‡·ğŸ‡¸" },
    { value: "sc", label: "Seychelles", flag: "ğŸ‡¸ğŸ‡¨" },
    { value: "sl", label: "Sierra Leone", flag: "ğŸ‡¸ğŸ‡±" },
    { value: "sg", label: "Singapore", flag: "ğŸ‡¸ğŸ‡¬" },
    { value: "sk", label: "Slovakia", flag: "ğŸ‡¸ğŸ‡°" },
    { value: "si", label: "Slovenia", flag: "ğŸ‡¸ğŸ‡®" },
    { value: "sb", label: "Solomon Islands", flag: "ğŸ‡¸ğŸ‡§" },
    { value: "so", label: "Somalia", flag: "ğŸ‡¸ğŸ‡´" },
    { value: "za", label: "South Africa", flag: "ğŸ‡¿ğŸ‡¦" },
    { value: "ss", label: "South Sudan", flag: "ğŸ‡¸ğŸ‡¸" },
    { value: "es", label: "Spain", flag: "ğŸ‡ªğŸ‡¸" },
    { value: "lk", label: "Sri Lanka", flag: "ğŸ‡±ğŸ‡°" },
    { value: "sd", label: "Sudan", flag: "ğŸ‡¸ğŸ‡©" },
    { value: "sr", label: "Suriname", flag: "ğŸ‡¸ğŸ‡·" },
    { value: "se", label: "Sweden", flag: "ğŸ‡¸ğŸ‡ª" },
    { value: "ch", label: "Switzerland", flag: "ğŸ‡¨ğŸ‡­" },
    { value: "sy", label: "Syria", flag: "ğŸ‡¸ğŸ‡¾" },
    { value: "tw", label: "Taiwan", flag: "ğŸ‡¹ğŸ‡¼" },
    { value: "tj", label: "Tajikistan", flag: "ğŸ‡¹ğŸ‡¯" },
    { value: "tz", label: "Tanzania", flag: "ğŸ‡¹ğŸ‡¿" },
    { value: "th", label: "Thailand", flag: "ğŸ‡¹ğŸ‡­" },
    { value: "tl", label: "Timor-Leste", flag: "ğŸ‡¹ğŸ‡±" },
    { value: "tg", label: "Togo", flag: "ğŸ‡¹ğŸ‡¬" },
    { value: "to", label: "Tonga", flag: "ğŸ‡¹ğŸ‡´" },
    { value: "tt", label: "Trinidad and Tobago", flag: "ğŸ‡¹ğŸ‡¹" },
    { value: "tn", label: "Tunisia", flag: "ğŸ‡¹ğŸ‡³" },
    { value: "tr", label: "Turkey", flag: "ğŸ‡¹ğŸ‡·" },
    { value: "tm", label: "Turkmenistan", flag: "ğŸ‡¹ğŸ‡²" },
    { value: "tv", label: "Tuvalu", flag: "ğŸ‡¹ğŸ‡»" },
    { value: "ug", label: "Uganda", flag: "ğŸ‡ºğŸ‡¬" },
    { value: "ua", label: "Ukraine", flag: "ğŸ‡ºğŸ‡¦" },
    { value: "ae", label: "United Arab Emirates", flag: "ğŸ‡¦ğŸ‡ª" },
    { value: "uk", label: "United Kingdom", flag: "ğŸ‡¬ğŸ‡§" },
    { value: "us", label: "United States", flag: "ğŸ‡ºğŸ‡¸" },
    { value: "uy", label: "Uruguay", flag: "ğŸ‡ºğŸ‡¾" },
    { value: "uz", label: "Uzbekistan", flag: "ğŸ‡ºğŸ‡¿" },
    { value: "vu", label: "Vanuatu", flag: "ğŸ‡»ğŸ‡º" },
    { value: "va", label: "Vatican City", flag: "ğŸ‡»ğŸ‡¦" },
    { value: "ve", label: "Venezuela", flag: "ğŸ‡»ğŸ‡ª" },
    { value: "vn", label: "Vietnam", flag: "ğŸ‡»ğŸ‡³" },
    { value: "ye", label: "Yemen", flag: "ğŸ‡¾ğŸ‡ª" },
    { value: "zm", label: "Zambia", flag: "ğŸ‡¿ğŸ‡²" },
    { value: "zw", label: "Zimbabwe", flag: "ğŸ‡¿ğŸ‡¼" }
];

const Step1PersonalInfo = ({ control, register, errors }) => {
    // Function to validate if user is 18 or older
    const validateAge = (value) => {
        const dob = new Date(value);
        const today = new Date();
        const eighteenYearsAgo = new Date(today);
        eighteenYearsAgo.setFullYear(today.getFullYear() - 18);
        
        return dob <= eighteenYearsAgo || "You must be at least 18 years old";
    };

    return (
        <motion.div
            key="step1"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
            className="space-y-6"
        >
            <h2 className="text-xl font-semibold text-gray-800">Personal Information</h2>

            {/* First Name */}
            <div className="space-y-2">
                <Label htmlFor="firstName">First Name</Label>
                <Input
                    id="firstName"
                    placeholder="Enter your first name"
                    {...register("firstName", { 
                        required: "First name is required",
                        minLength: {
                            value: 3,
                            message: "First name must be at least 3 characters"
                        },
                        pattern: {
                            value: /^[A-Za-z\s]+$/,
                            message: "First name must contain only letters"
                        }
                    })}
                    className={errors.firstName ? "border-red-500 focus-visible:ring-red-500" : ""}
                />
                {errors.firstName && <p className="text-sm text-red-500">{errors.firstName.message}</p>}
            </div>

            {/* Surname */}
            <div className="space-y-2">
                <Label htmlFor="surname">Surname</Label>
                <Input
                    id="surname"
                    placeholder="Enter your surname"
                    {...register("surname", { 
                        required: "Surname is required",
                        minLength: {
                            value: 3,
                            message: "Surname must be at least 3 characters"
                        },
                        pattern: {
                            value: /^[A-Za-z\s]+$/,
                            message: "Surname must contain only letters"
                        }
                    })}
                    className={errors.surname ? "border-red-500 focus-visible:ring-red-500" : ""}
                />
                {errors.surname && <p className="text-sm text-red-500">{errors.surname.message}</p>}
            </div>

            {/* Date of Birth */}
            <div className="space-y-2">
                <Label htmlFor="dateOfBirth">Date of Birth</Label>
                <div className="relative">
                    <Input
                        id="dateOfBirth"
                        type="date"
                        {...register("dateOfBirth", { 
                            required: "Date of birth is required",
                            validate: validateAge
                        })}
                        className={`${errors.dateOfBirth ? "border-red-500 focus-visible:ring-red-500" : ""}`}
                    />
                    <Calendar
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none"
                        size={18}
                    />
                </div>
                {errors.dateOfBirth && <p className="text-sm text-red-500">{errors.dateOfBirth.message}</p>}
            </div>

            {/* Gender */}
            <div className="space-y-2">
                <Label htmlFor="gender">Gender</Label>
                <Controller
                    name="gender"
                    control={control}
                    rules={{ required: "Please select your gender" }}
                    render={({ field }) => (
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <SelectTrigger className={errors.gender ? "border-red-500 focus-visible:ring-red-500" : ""}>
                                <SelectValue placeholder="Select your gender" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="male">Male</SelectItem>
                                <SelectItem value="female">Female</SelectItem>
                                <SelectItem value="prefer-not-to-say">Prefer not to say</SelectItem>
                            </SelectContent>
                        </Select>
                    )}
                />
                {errors.gender && <p className="text-sm text-red-500">{errors.gender.message}</p>}
            </div>

            {/* Nationality */}
            <div className="space-y-2">
                <Label htmlFor="nationality">Nationality</Label>
                <Controller
                    name="nationality"
                    control={control}
                    rules={{ required: "Please select your nationality" }}
                    render={({ field }) => (
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <SelectTrigger
                                className={errors.nationality ? "border-red-500 focus-visible:ring-red-500" : ""}
                            >
                                <SelectValue placeholder="Select your nationality" />
                            </SelectTrigger>
                            <SelectContent 
                                className="max-h-[200px] overflow-y-auto"
                                position="popper" 
                                align="start" 
                                side="bottom"
                            >
                                {countries.map((country) => (
                                    <SelectItem key={country.value} value={country.value}>
                                        <span className="flex items-center">
                                            <span className="mr-2">{country.flag}</span>
                                            {country.label}
                                        </span>
                                    </SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    )}
                />
                {errors.nationality && <p className="text-sm text-red-500">{errors.nationality.message}</p>}
            </div>

            {/* Academic Level */}
            <div className="space-y-2">
                <div className="flex items-center">
                    <Label htmlFor="academicLevel">Academic Level</Label>
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Info className="ml-2 h-4 w-4 text-gray-400" />
                            </TooltipTrigger>
                            <TooltipContent>
                                <p>We use your academic level to tailor course content.</p>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                </div>
                <Controller
                    name="academicLevel"
                    control={control}
                    rules={{ required: "Please select your academic level" }}
                    render={({ field }) => (
                        <RadioGroup
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                            className="flex flex-col space-y-1"
                        >
                            <div className="flex items-center space-x-2">
                                <RadioGroupItem value="undergraduate" id="undergraduate" />
                                <Label htmlFor="undergraduate">Undergraduate</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                                <RadioGroupItem value="masters" id="masters" />
                                <Label htmlFor="masters">Masters</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                                <RadioGroupItem value="postgraduate" id="postgraduate" />
                                <Label htmlFor="postgraduate">Postgraduate</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                                <RadioGroupItem value="phd" id="phd" />
                                <Label htmlFor="phd">PhD</Label>
                            </div>
                        </RadioGroup>
                    )}
                />
                {errors.academicLevel && <p className="text-sm text-red-500">{errors.academicLevel.message}</p>}
            </div>
            
            {/* Course Year */}
            <div className="space-y-2">
                <div className="flex items-center">
                    <Label htmlFor="courseYear">Course Year</Label>
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Info className="ml-2 h-4 w-4 text-gray-400" />
                            </TooltipTrigger>
                            <TooltipContent>
                                <p>Your current year of study.</p>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                </div>
                <Controller
                    name="courseYear"
                    control={control}
                    rules={{ required: "Please select your course year" }}
                    render={({ field }) => (
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <SelectTrigger className={errors.courseYear ? "border-red-500 focus-visible:ring-red-500" : ""}>
                                <SelectValue placeholder="Select your course year" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="foundational">Foundational</SelectItem>
                                <SelectItem value="year1">Year 1</SelectItem>
                                <SelectItem value="year2">Year 2</SelectItem>
                                <SelectItem value="year3">Year 3</SelectItem>
                                <SelectItem value="year4">Year 4</SelectItem>
                                <SelectItem value="year5">Year 5+</SelectItem>
                            </SelectContent>
                        </Select>
                    )}
                />
                {errors.courseYear && <p className="text-sm text-red-500">{errors.courseYear.message}</p>}
            </div>

            <p className="text-xs text-gray-500 mt-4">
                We comply with GDPR. Your data is encrypted and never shared.
            </p>
        </motion.div>
    );
};

export default Step1PersonalInfo; 